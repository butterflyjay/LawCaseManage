"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequest = void 0;
const http_1 = require("http");
const sessionfactory_1 = require("./sessionfactory");
const httpresponse_1 = require("./httpresponse");
const webconfig_1 = require("./webconfig");
const application_1 = require("../tools/application");
const util_1 = require("../tools/util");
const errorfactory_1 = require("../tools/errorfactory");
/**
 * request类
 * @remarks
 * 在IncomingMessage基础上增加了参数解析等方法，更适合直接使用
 */
class HttpRequest extends http_1.IncomingMessage {
    /**
     * 构造器
     * @param req 源IncommingMessage对象(createServer时传入)
     * @param res 源ServerResponse对象(createServer时传入)
     */
    constructor(req, res) {
        super(req.socket);
        /**
         * 参数对象
         */
        this.parameters = new Object();
        this.srcReq = req;
        //response 初始化
        this.response = new httpresponse_1.HttpResponse(req);
        this.response.init(req, res);
        this.url = req.url;
        this.method = req.method;
        this.initQueryString();
    }
    /**
     * 初始化
     * @returns 请求参数
     */
    async init() {
        //非 post
        if (this.method !== 'POST') {
            return this.parameters;
        }
        try {
            let obj = await this.formHandle();
            if (typeof obj === 'object') {
                Object.getOwnPropertyNames(obj).forEach(key => {
                    //已存在该key，需要做成数组
                    if (this.parameters[key]) {
                        if (!Array.isArray(this.parameters[key])) {
                            this.parameters[key] = [this.parameters[key]];
                        }
                        this.parameters[key].push(obj[key]);
                    }
                    else {
                        this.parameters[key] = obj[key];
                    }
                });
            }
        }
        catch (e) {
            console.error(e);
        }
        return this.parameters;
    }
    /**
     * 获取请求消息头信息
     * @param key   消息头名，具体取值参考message.headers
     * @returns     消息值
     */
    getHeader(key) {
        return this.srcReq.headers[key];
    }
    /**
     * 获取请求方法，入GET、POSt等
     */
    getMethod() {
        return this.srcReq.method;
    }
    /**
     * 获取来源url路径
     */
    getUrl() {
        return this.srcReq.url;
    }
    /**
     * 获取socket，可以通过socket获取远程地址、本地地址等
     * @returns     socket对象
     */
    getSocket() {
        return this.srcReq.socket;
    }
    /**
     * 设置参数
     * @param name      参数名
     * @param value     参数值
     */
    setParameter(name, value) {
        this.parameters[name] = value;
    }
    /**
     * 获取参数
     * @param name      参数名
     * @returns         参数值
     */
    getParameter(name) {
        return this.parameters[name];
    }
    /**
     * 获取所有paramter
     * @returns         参数object
     */
    getAllParameters() {
        return this.parameters;
    }
    /**
     * 初始化url查询串
     */
    initQueryString() {
        this.parameters = application_1.App.qs.parse(application_1.App.url.parse(this.url).query);
    }
    /**
     * 获取session
     * @returns   session对象
     */
    async getSession() {
        return await sessionfactory_1.SessionFactory.getSession(this);
    }
    /**
     * POST时的参数处理
     * @returns     参数值对象
     */
    formHandle() {
        let req = this.srcReq;
        let contentString = req.headers['content-type'];
        let contentType;
        //multipart/form-data 提交
        let isMultiple = false;
        //非文件multipart/form-data方式
        if (contentString) {
            contentType = contentString.split(';');
            isMultiple = contentType[0] === 'multipart/form-data';
        }
        if (!isMultiple) {
            return new Promise((resolve, reject) => {
                let lData = Buffer.from('');
                req.on('data', (chunk) => {
                    lData = Buffer.concat([lData, chunk]);
                });
                req.on('end', () => {
                    let r;
                    //处理charset
                    let charset = 'utf8';
                    if (contentType && contentType.length > 1) {
                        let a1 = contentType[1].split('=');
                        if (a1.length > 1) {
                            charset = a1[1].trim();
                        }
                    }
                    let data = lData.toString(charset);
                    if (contentType && contentType[0] === 'application/json') {
                        r = JSON.parse(data);
                    }
                    else {
                        r = application_1.App.qs.parse(data);
                    }
                    resolve(r);
                });
            });
        }
        let contentLen = parseInt(req.headers['content-length']);
        let maxSize = webconfig_1.WebConfig.get('upload_max_size');
        //不能大于max size
        if (maxSize > 0 && contentLen > maxSize) {
            return Promise.reject(new errorfactory_1.NoomiError('0501'));
        }
        //临时目录，默认 /upload/tmp
        let tmpDir = webconfig_1.WebConfig.get('upload_tmp_dir') || '/upload/tmp';
        let tmpDir1 = util_1.Util.getAbsPath([tmpDir]);
        //如果临时目录不存在，则生成临时目录
        if (!application_1.App.fs.existsSync(tmpDir1)) {
            application_1.App.fs.mkdirSync(tmpDir1, { recursive: true });
        }
        let formHandler = new FormDataHandler(tmpDir);
        return new Promise((resolve, reject) => {
            req.on('data', (chunk) => {
                formHandler.getDispAndLineBreak(chunk);
                formHandler.addBuf(chunk);
            });
            req.on('end', () => {
                formHandler.handleBuffer();
                resolve(formHandler.returnObj);
            });
        });
    }
}
exports.HttpRequest = HttpRequest;
/**
 * form 数据处理类
 */
class FormDataHandler {
    constructor(path) {
        /**
         * 属性集
         */
        this.returnObj = {};
        this.savePath = path;
        this.buffer = Buffer.from('');
    }
    addBuf(buf) {
        this.buffer = Buffer.concat([this.buffer, buf]);
    }
    /**
     * 获取换行符
     * @param buf   来源buffer
     * @returns
     */
    getDispAndLineBreak(buf) {
        if (this.rowChar) {
            return;
        }
        let i = 0;
        for (i = 0; i < buf.length; i++) {
            if (buf[i] === 13) {
                if (i < buf.length - 1 && buf[i + 1] === 10) {
                    this.rowChar = '\r\n';
                }
                else {
                    this.rowChar = '\r';
                }
                break;
            }
            else if (buf[i] === 10) {
                this.rowChar = '\n';
                break;
            }
        }
        this.dispLine = buf.subarray(0, i);
    }
    /**
     * 处理缓冲区
     */
    async handleBuffer() {
        let buf = this.buffer;
        while (buf.length > 0) {
            let index = buf.indexOf(this.dispLine);
            if (index === -1) {
                return;
            }
            //去掉换行符
            let buf1 = buf.subarray(0, index - this.rowChar.length);
            if (this.dataKey) {
                //文件结束
                if (this.isFile) {
                    application_1.App.fs.writeFileSync(this.value['path'], buf1, { encoding: 'binary', flag: 'a+' });
                }
                else { //值加
                    this.value = Buffer.concat([this.value, buf1]);
                }
                //buffer需要转换为数组
                let v = this.value;
                if (v instanceof Buffer) {
                    v = v.toString();
                }
                //如果键已存在，则作为数组
                if (this.returnObj.hasOwnProperty(this.dataKey)) {
                    //新建数组
                    if (!Array.isArray(this.returnObj[this.dataKey])) {
                        this.returnObj[this.dataKey] = [this.returnObj[this.dataKey]];
                    }
                    //新值入数组
                    this.returnObj[this.dataKey].push(v);
                }
                else {
                    this.returnObj[this.dataKey] = v;
                }
            }
            //重置参数
            this.isFile = false;
            this.value = undefined;
            let start = index + this.dispLine.length;
            //结束符号
            if (buf[start] === 45 && buf[start + 1] === 45) {
                return;
            }
            buf = buf.subarray(start + this.rowChar.length);
            let r = this.readLine(buf);
            if (!r) {
                return;
            }
            this.handleProp(r[0]);
            buf = r[1];
            if (this.isFile) { //是文件，取文件类型
                r = this.readLine(buf);
                if (!r || r[0] === '') {
                    return;
                }
                this.value['fileType'] = r[0].substr(r[0].indexOf(':') + 1).trim();
                buf = r[1];
            }
            else {
                this.value = Buffer.from('');
            }
            //读空行
            r = this.readLine(buf);
            if (r) {
                buf = r[1];
            }
        }
    }
    /**
     * 从buffer读一行
     * @param buf   buf
     * @returns     [行字符串,读取行后的buf]
     */
    readLine(buf) {
        let index = buf.indexOf(this.rowChar);
        if (index === -1) {
            return null;
        }
        let r = buf.subarray(0, index).toString();
        buf = buf.subarray(index + this.rowChar.length);
        return [r, buf];
    }
    /**
     * 处理属性名
     * @param line  行数据
     */
    handleProp(line) {
        if (line === '') {
            return;
        }
        let arr = line.toString().split(';');
        //数据项
        this.dataKey = arr[1].substr(arr[1].indexOf('=')).trim();
        this.dataKey = this.dataKey.substring(2, this.dataKey.length - 1);
        if (arr.length === 3) { //文件
            let a1 = arr[2].split('=');
            let fn = a1[1].trim();
            let fn1 = fn.substring(1, fn.length - 1).trim();
            //文件名为空，此项不存
            if (a1[1] == '""') {
                this.dataKey = undefined;
            }
            let fn2 = application_1.App.uuid.v1() + fn1.substr(fn1.lastIndexOf('.'));
            //得到绝对路径
            let filePath = util_1.Util.getAbsPath([this.savePath, fn2]);
            this.value = {
                fileName: fn1,
                path: filePath
            };
            this.isFile = true;
        }
    }
}
//# sourceMappingURL=httprequest.js.map