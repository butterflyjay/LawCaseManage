"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterFactory = void 0;
const instancefactory_1 = require("../main/instancefactory");
const errorfactory_1 = require("../tools/errorfactory");
const util_1 = require("../tools/util");
const application_1 = require("../tools/application");
/**
 * 过滤器工厂类
 * @remarks
 * 用于管理所有过滤器对象
 */
class FilterFactory {
    /**
     * 添加过滤器到工厂
     * @param cfg   过滤器配置项
     */
    static addFilter(cfg) {
        let insName = cfg.instance_name;
        if (!insName) {
            return;
        }
        //方法名,默认方法do
        let method = cfg.method_name || 'do';
        // 正则式数组
        let ptns = [];
        //默认 "/*"
        if (!cfg.url_pattern) {
            ptns = [/^\/*/];
        }
        else if (Array.isArray(cfg.url_pattern)) { //数组
            cfg.url_pattern.forEach((item) => {
                ptns.push(util_1.Util.toReg(item));
            });
        }
        else { //字符串
            ptns.push(util_1.Util.toReg(cfg.url_pattern));
        }
        //查找重复过滤器类
        let f = this.filters.find(item => {
            return item.instance === insName && item.method === method;
        });
        //删除之前添加的过滤器
        if (f) {
            let ind = this.filters.indexOf(f);
            this.filters.splice(ind, 1);
        }
        //加入过滤器集合
        this.filters.push({
            instance: insName,
            method: method,
            patterns: ptns,
            order: cfg.order === undefined ? 10000 : cfg.order
        });
        this.filters.sort((a, b) => {
            return a.order - b.order;
        });
    }
    /**
     * @exclude
     * 文件解析
     * @param path      filter的json文件
     */
    static parseFile(path) {
        //读取文件
        let jsonStr = application_1.App.fs.readFileSync(path, 'utf-8');
        let json = null;
        try {
            json = application_1.App.JSON.parse(jsonStr);
        }
        catch (e) {
            throw new errorfactory_1.NoomiError("2200") + '\n' + e;
        }
        this.init(json);
    }
    /**
     * 初始化
     * @param config {filters:[{IFilterCfg1},...]}
     */
    static init(config) {
        //处理filters
        if (Array.isArray(config.filters)) {
            config.filters.forEach((item) => {
                this.addFilter(item);
            });
        }
    }
    /**
     * 获取过滤器链
     * @param url   资源url
     * @returns     filter数组
     */
    static getFilterChain(url) {
        let arr = [];
        this.filters.forEach((item) => {
            let reg;
            for (reg of item.patterns) {
                //找到匹配
                if (reg.test(url)) {
                    arr.push(item);
                    return;
                }
            }
        });
        return arr;
    }
    /**
     * 执行过滤器链
     * @param url       url路径
     * @param request   request 对象
     * @param response  response 对象
     * @param           全部执行完为true，否则为false
     */
    static async doChain(url, request, response) {
        let arr = FilterFactory.getFilterChain(url);
        if (arr.length === 0) {
            return true;
        }
        for (let item of arr) {
            let ins = instancefactory_1.InstanceFactory.getInstance(item.instance);
            if (!ins) {
                continue;
            }
            if (typeof ins[item.method] === 'function') {
                if (!await instancefactory_1.InstanceFactory.exec(ins, item.method, [request, response])) {
                    return false;
                }
            }
        }
        return true;
    }
}
exports.FilterFactory = FilterFactory;
/**
 * 过滤器实例数组
 */
FilterFactory.filters = [];
//# sourceMappingURL=filterfactory.js.map