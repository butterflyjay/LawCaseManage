"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestQueue = void 0;
const webconfig_1 = require("./webconfig");
const routefactory_1 = require("../main/route/routefactory");
const filterfactory_1 = require("./filterfactory");
const staticresource_1 = require("./staticresource");
const application_1 = require("../tools/application");
const pagefactory_1 = require("../tools/pagefactory");
const util_1 = require("../tools/util");
const webcache_1 = require("./webcache");
/**
 * @exclude
 * 请求队列
 */
class RequestQueue {
    /**
     * 加入队列
     * @param req
     * @param res
     */
    static add(req) {
        let timeout = webconfig_1.WebConfig.get('request_timeout') || 0;
        this.queue.push({
            req: req,
            expire: timeout > 0 ? new Date().getTime() + timeout * 1000 : 0
        });
        if (this.canHandle) {
            this.handle();
        }
    }
    /**
     * 处理队列
     */
    static handle() {
        //队列轮询
        if (this.queue.length === 0) {
            return;
        }
        //cpu超限，延迟1m执行队列
        if (!this.canHandle) {
            this.canHandle = true;
            setTimeout(() => {
                RequestQueue.handle();
            }, 1000);
            return;
        }
        let item = this.queue.shift();
        if (item.expire === 0 || item.expire > new Date().getTime()) {
            this.handleOne(item.req);
        }
        this.handle();
    }
    /**
     * 资源访问
     * @param request   request
     * @param path      url路径
     */
    static async handleOne(request) {
        let response = request.response;
        switch (request.method) {
            case 'OPTIONS':
                response.doOptions();
                return;
            case 'DELETE':
                response.writeToClient({
                    statusCode: 405
                });
                return;
            case 'PUT':
                response.writeToClient({
                    statusCode: 405
                });
                return;
            case 'PATCH':
                response.writeToClient({
                    statusCode: 405
                });
                return;
        }
        // gzip
        let zipStr = request.getHeader("accept-encoding");
        let gzip = zipStr && zipStr.indexOf('gzip') !== -1 ? true : false;
        let path = application_1.App.url.parse(request.url).pathname;
        let data;
        //welcome页面
        if (path === '' || path === '/') {
            if (webconfig_1.WebConfig.welcomePage) {
                path = webconfig_1.WebConfig.welcomePage;
            }
        }
        //过滤器执行
        if (!await filterfactory_1.FilterFactory.doChain(request.url, request, response)) {
            return;
        }
        //从路由查找
        let route = routefactory_1.RouteFactory.getRoute(path);
        if (route !== null) {
            //执行
            try {
                data = await routefactory_1.RouteFactory.handleRoute(route, request, response);
            }
            catch (e) {
                routefactory_1.RouteFactory.handleException(response, e);
                //输出
                console.error(e);
                return;
            }
        }
        else { //静态资源
            //从web cache获取数据
            data = await webcache_1.WebCache.load(request, response, path);
            if (!data) {
                //加载静态数据
                data = await staticresource_1.StaticResource.load(request, response, path, gzip);
            }
        }
        if (data) {
            if (typeof data === 'number') {
                if (data !== 0) {
                    let page = pagefactory_1.PageFactory.getErrorPage(data);
                    if (page && application_1.App.fs.existsSync(util_1.Util.getAbsPath([page]))) {
                        response.redirect(page);
                    }
                    else {
                        response.writeToClient({
                            statusCode: data
                        });
                    }
                }
            }
            else if (typeof data === 'object') {
                let cData = data;
                //json格式为utf8，zip和流用binary
                let charset = data.mimeType && data.mimeType.indexOf('/json') === -1 || gzip && cData.zipData ? 'binary' : 'utf8';
                //写web cache相关参数
                webcache_1.WebCache.writeCacheToClient(response, cData.etag, cData.lastModified);
                //可能只缓存静态资源信息，所以需要判断数据
                if (gzip && cData.zipData) {
                    response.writeToClient({
                        data: cData.zipData,
                        type: cData.mimeType,
                        size: cData.zipSize,
                        zip: 'gzip',
                        charset: charset
                    });
                }
                else if (cData.data) {
                    response.writeToClient({
                        data: cData.data,
                        type: cData.mimeType,
                        size: cData.dataSize,
                        charset: charset
                    });
                }
                else {
                    response.writeFileToClient({
                        data: util_1.Util.getAbsPath([path]),
                        type: cData.mimeType,
                        size: cData.dataSize
                    });
                }
            }
        }
    }
    /**
     * 设置允许处理标志
     * @param v
     */
    static setCanHandle(v) {
        this.canHandle = v;
    }
}
exports.RequestQueue = RequestQueue;
RequestQueue.queue = [];
//可以处理标志
RequestQueue.canHandle = true;
//# sourceMappingURL=requestqueue.js.map