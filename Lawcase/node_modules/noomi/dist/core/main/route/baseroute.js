"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRoute = void 0;
/**
 * 路由基类
 * 可自动为路由类生成model(传入参数对象)，自带request和response对象
 * 建议所有路由继承此基类
 */
class BaseRoute {
    /**
     * 为model设置值
     * @param data  数据对象(由浏览器/客户端传入的数据参数)
     * @returns     无异常null，否则返回异常字段集
     */
    setModel(data, nullArr) {
        if (this.__modelClass) {
            let m = new this.__modelClass();
            if (nullArr) {
                for (let p of nullArr) {
                    m.__addValidator(p, 'nullable');
                }
            }
            Object.getOwnPropertyNames(data).forEach((item) => {
                m[item] = data[item];
            });
            let isJsonReq = false;
            let ctType = this.request.getHeader('content-type');
            if (ctType) {
                isJsonReq = ctType.startsWith('application/json');
            }
            //数据转换和校验，如果request content-type为application/json，则不进行转换
            let r = m.__handle(isJsonReq);
            this.model = m;
            return r;
        }
        else {
            this.model = data;
        }
        return null;
    }
    /**
     * 设置request对象
     * @param req   request对象
     */
    setRequest(req) {
        this.request = req;
    }
    /**
     * 设置reponse对象
     * @param res   response对象
     */
    setResponse(res) {
        this.response = res;
    }
    /**
     * 增加nullcheck 方法
     * @param methodName    方法名
     * @param props         检测数组
     */
    __addNullCheck(methodName, props) {
        if (!this.__nullCheckMap) {
            this.__nullCheckMap = new Map();
        }
        this.__nullCheckMap.set(methodName, props);
    }
    /**
     * 获取null check 数组
     * @param methodName 方法名
     */
    __getNullCheck(methodName) {
        if (this.__nullCheckMap) {
            return this.__nullCheckMap.get(methodName);
        }
        return null;
    }
}
exports.BaseRoute = BaseRoute;
//# sourceMappingURL=baseroute.js.map