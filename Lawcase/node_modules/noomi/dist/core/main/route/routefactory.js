"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERouteResultType = exports.RouteFactory = void 0;
const instancefactory_1 = require("../instancefactory");
const errorfactory_1 = require("../../tools/errorfactory");
const util_1 = require("../../tools/util");
const application_1 = require("../../tools/application");
const routeerrorhandler_1 = require("./routeerrorhandler");
/**
 * 路由结果类型
 * @since 0.0.6
 */
var ERouteResultType;
(function (ERouteResultType) {
    /**
     * 重定向
     */
    ERouteResultType["REDIRECT"] = "redirect";
    /**
     * 路由链,和redirect不同，浏览器地址不会改变
     */
    ERouteResultType["CHAIN"] = "chain";
    /**
     * 文件流，主要用于文件下载
     */
    ERouteResultType["STREAM"] = "stream";
    /**
     * 什么都不做
     */
    ERouteResultType["NONE"] = "none";
    /**
     * json数据,默认类型
     */
    ERouteResultType["JSON"] = "json";
})(ERouteResultType || (ERouteResultType = {}));
exports.ERouteResultType = ERouteResultType;
/**
 * 路由工厂类
 * 用于管理所有路由对象
 */
class RouteFactory {
    /**
     * 添加路由
     * @param path      路由路径，支持通配符*，需要method支持
     * @param clazz     对应类
     * @param method    方法，path中包含*，则不设置
     * @param results   路由处理结果集
     */
    static addRoute(path, clazz, method, results) {
        if (!path || !clazz) {
            return;
        }
        if (results && results.length > 0) {
            for (let r of results) {
                if ((r.type === ERouteResultType.CHAIN || r.type === ERouteResultType.REDIRECT)
                    && (!r.url || typeof r.url !== 'string' || (r.url = r.url.trim()) === '')) {
                    throw new errorfactory_1.NoomiError("2101");
                }
            }
        }
        if (method) {
            method = method.trim();
        }
        //没有通配符
        if (path.indexOf('*') === -1) {
            this.staticRouteMap.set(path, {
                instanceName: clazz.trim(),
                method: method,
                results: results
            });
        }
        else { //有通配符
            if (!this.dynaRouteArr.find(item => item.path === path)) {
                this.dynaRouteArr.push({
                    path: path,
                    reg: util_1.Util.toReg(path, 3),
                    instanceName: clazz.trim(),
                    method: method,
                    results: results
                });
            }
        }
    }
    /**
     * 根据路径获取路由对象
     * @param path      url路径
     * @returns         路由对象
     */
    static getRoute(path) {
        let item;
        let method; //方法名
        //下查找非通配符map
        if (this.staticRouteMap.has(path)) {
            item = this.staticRouteMap.get(path);
            method = item.method;
        }
        else {
            for (let i = 0; i < this.dynaRouteArr.length; i++) {
                item = this.dynaRouteArr[i];
                //路径测试通过
                if (item.reg.test(path)) {
                    method = item.method;
                    if (!method) {
                        let index = item.path.indexOf("(");
                        //通配符处理
                        if (index !== -1) {
                            //通配符方法
                            method = path.substr(index);
                        }
                    }
                    break;
                }
            }
        }
        //找到匹配的则返回
        if (item && method) {
            let instance = instancefactory_1.InstanceFactory.getInstance(item.instanceName);
            if (instance && typeof instance[method] === 'function') {
                return { instance: instance, method: method, results: item.results };
            }
        }
        return null;
    }
    /**
     * 路由方法执行
     * @param pathOrRoute   路径或路由
     * @param req           request 对象
     * @param res           response 对象
     * @param params        调用参数对象
     * @returns             0 正常 1异常
     */
    static async handleRoute(route, req, res, params) {
        //尚未初始化
        if (!this.errorHandler) {
            this.init({});
        }
        //绑定path
        if (!route.path && req) {
            route.path = req.url;
        }
        //设置request
        if (typeof route.instance.setRequest === 'function') {
            route.instance.setRequest(req);
        }
        //设置response
        if (typeof route.instance.setResponse === 'function') {
            route.instance.setResponse(res);
        }
        //初始化参数
        if (!params) {
            params = await req.init();
        }
        //设置model
        if (typeof route.instance.setModel === 'function') {
            let nullArr;
            if (route.instance.__getNullCheck) { //空属性
                nullArr = route.instance.__getNullCheck(route.method);
            }
            let r = route.instance.setModel(params, nullArr);
            if (r !== null) { //setmodel异常
                throw r;
            }
        }
        //实际调用方法
        let func = route.instance[route.method];
        if (typeof func !== 'function') {
            throw new errorfactory_1.NoomiError("1010");
        }
        try {
            let re = await func.call(route.instance, route.instance || params);
            return await this.handleResult(route, re);
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * 处理路由结果
     * @param route     route对象
     * @param data      路由对应方法返回值
     */
    static async handleResult(route, data) {
        const results = route.results;
        if (results && results.length > 0) {
            //单个结果，不判断返回值
            if (results.length === 1) {
                return await this.handleOneResult(route, results[0], data);
            }
            else {
                let r;
                for (r of results) {
                    //result不带value，或找到返回值匹配，则处理
                    if (r.value === undefined || data && data == r.value) {
                        return await this.handleOneResult(route, r, data);
                    }
                }
            }
        }
        //默认回写json
        return await this.handleOneResult(route, {}, data);
    }
    /**
     * 处理一个路由结果
     * @param route         route对象
     * @param result        route result
     * @param data          路由执行结果
     * @returns             cache数据对象或0
     */
    static async handleOneResult(route, result, data) {
        let url;
        const instance = route.instance;
        const res = route.instance.response;
        //返回值
        let ret = 0;
        switch (result.type) {
            case ERouteResultType.REDIRECT: //重定向
                url = handleParamUrl(instance, result.url);
                let pa = [];
                //参数属性
                if (result.params && Array.isArray(result.params) && result.params.length > 0) {
                    for (let pn of result.params) {
                        let v = getValue(instance, pn);
                        if (v !== undefined) {
                            pa.push(pn + '=' + v);
                        }
                    }
                }
                let pas = pa.join('&');
                if (pas !== '') {
                    if (url.indexOf('?') === -1) {
                        url += '?' + pas;
                    }
                    else {
                        url += '&' + pas;
                    }
                }
                res.redirect(url);
                break;
            case ERouteResultType.CHAIN: //路由器链
                url = handleParamUrl(instance, result.url);
                let url1 = application_1.App.url.parse(url).pathname;
                let params = application_1.App.qs.parse(application_1.App.url.parse(url).query);
                //参数处理
                if (result.params && Array.isArray(result.params) && result.params.length > 0) {
                    for (let pn of result.params) {
                        let v = getValue(instance, pn);
                        if (v !== undefined) {
                            params[pn] = v;
                        }
                    }
                }
                let route1 = this.getRoute(url1);
                if (route1 === null) {
                    throw new errorfactory_1.NoomiError("2103", url1);
                }
                //设置route path
                route1.path = url1;
                return await this.handleRoute(route1, route.instance.request, res, params);
            case ERouteResultType.NONE: //什么都不做
                break;
            case ERouteResultType.STREAM: //文件流
                //文件名
                let pn = result.params[0];
                if (pn) {
                    let fn = getValue(instance, pn);
                    if (fn) {
                        fn = util_1.Util.getAbsPath([fn]);
                        if (!application_1.App.fs.existsSync(fn)) {
                            throw new errorfactory_1.NoomiError('0050');
                        }
                        res.writeFileToClient({
                            data: fn
                        });
                    }
                }
                break;
            default: //json
                //处理json对象
                let mimeType = 'text/html';
                if (typeof data === 'object') {
                    data = JSON.stringify(data);
                    mimeType = 'application/json';
                }
                ret = {
                    data: data,
                    mimeType: mimeType
                };
        }
        return ret;
        /**
         * 处理带参数的url，参数放在{}中
         * @param url   源url，以${propName}出现
         * @returns     处理后的url
         */
        function handleParamUrl(instance, url) {
            let reg = /\$\{.*?\}/g;
            let r;
            //处理带参数url
            while ((r = reg.exec(url)) !== null) {
                let pn = r[0].substring(2, r[0].length - 1);
                url = url.replace(r[0], getValue(instance, pn));
            }
            return url;
        }
        /**
         * 获取属性值
         * @param instance  实例
         * @param pn        属性名
         * @returns         属性值
         */
        function getValue(instance, pn) {
            if (instance[pn] !== undefined) {
                return instance[pn];
            }
            else if (instance.model && instance.model[pn] !== undefined) {
                return instance.model[pn];
            }
        }
    }
    /**
     * 处理异常信息
     * @param res   response 对象
     * @param e     异常
     */
    static handleException(res, e) {
        let eh = instancefactory_1.InstanceFactory.getInstance(this.errorHandler);
        if (eh) {
            eh.handle(res, e);
        }
        else {
            res.writeToClient({
                data: e
            });
        }
    }
    /**
     * 初始化路由工厂
     * @param config    配置文件
     * @param ns        命名空间（上级路由路径）
     */
    static init(config, ns) {
        //初始化errorHandler
        if (!this.errorHandler) {
            if (config.route_error_handler) {
                this.errorHandler = config.route_error_handler;
            }
            else {
                instancefactory_1.InstanceFactory.addInstance({
                    name: 'noomi_route_error_handler',
                    instance: new routeerrorhandler_1.RouteErrorHandler(),
                    class: routeerrorhandler_1.RouteErrorHandler
                });
                this.errorHandler = 'noomi_route_error_handler';
            }
        }
        let ns1 = config.namespace ? config.namespace.trim() : '';
        //设置命名空间，如果是子文件，需要连接上级文件
        let pa = ns ? [ns, ns1] : [ns1];
        ns = util_1.Util.getAbsPath(pa);
        //处理本级路由
        if (Array.isArray(config.routes)) {
            config.routes.forEach((item) => {
                //增加namespce前缀
                let p = util_1.Util.getAbsPath([ns, item.path]);
                this.addRoute(p, item.instance_name, item.method, item.results);
            });
        }
        //处理子路径路由
        if (Array.isArray(config.files)) {
            config.files.forEach((item) => {
                this.parseFile(util_1.Util.getAbsPath([application_1.App.configPath, item]), ns);
            });
        }
    }
    /**
     * 解析路由文件
     * @param path  文件路径
     * @param ns    命名空间，默认 /
     */
    static parseFile(path, ns) {
        //读取文件
        let json = null;
        try {
            let jsonStr = application_1.App.fs.readFileSync(path, 'utf-8');
            json = application_1.App.JSON.parse(jsonStr);
        }
        catch (e) {
            throw new errorfactory_1.NoomiError("2100") + '\n' + e;
        }
        this.init(json, ns);
    }
}
exports.RouteFactory = RouteFactory;
/**
 * 动态路由(带通配符)路由集合
 */
RouteFactory.dynaRouteArr = new Array();
/**
 * 静态路由(不带通配符)路由集合
 */
RouteFactory.staticRouteMap = new Map();
//# sourceMappingURL=routefactory.js.map