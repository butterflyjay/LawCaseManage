"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelaenConnectionManager = void 0;
const transactionmanager_1 = require("./transactionmanager");
/**
 * relaen连接管理器
 * @since 0.4.7
 */
class RelaenConnectionManager {
    /**
     * 构造器
     * @param cfg 配置对象 {usePool:使用连接池,useTransaction:是否启用事务机制,其它配置参考options属性说明}
     */
    constructor(cfg) {
        const { RelaenManager } = require('relaen');
        //entity路径换成绝对路径
        this.options = cfg;
        //relan 初始化
        try {
            RelaenManager.init(cfg);
        }
        catch (e) {
            console.log(e);
        }
    }
    /**
     * 获取连接
     * @returns relaen connection对象
     */
    async getConnection() {
        let conn = await transactionmanager_1.TransactionManager.getConnection();
        if (conn) {
            return conn;
        }
        //从 relaen获取
        const { getConnection, getEntityManager } = require('relaen');
        conn = await getConnection();
        //获取entity manager，保证该connection下只有一个entitymanager
        await getEntityManager();
        return conn;
    }
    /**
     * 获取manager
     * @returns     EntityManager
     */
    async getManager() {
        const { getEntityManager } = require('relaen');
        return await getEntityManager();
    }
    /**
     * 释放连接，不做任何操作
     * @param conn  连接
     */
    async release(conn) {
        if (conn) {
            //释放entitymanager
            const { EntityManagerFactory } = require('relaen');
            let em = EntityManagerFactory.getCurrentEntityManager();
            if (em) {
                await em.close(true);
            }
            //释放connection
            await conn.close(true);
        }
    }
}
exports.RelaenConnectionManager = RelaenConnectionManager;
//# sourceMappingURL=relaenconnectionmanager.js.map