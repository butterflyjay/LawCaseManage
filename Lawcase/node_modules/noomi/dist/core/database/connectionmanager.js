"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getManager = exports.closeConnection = exports.getConnection = void 0;
const dbmanager_1 = require("./dbmanager");
const transactionmanager_1 = require("./transactionmanager");
/**
 * 获取数据库或数据源连接
 * @returns    数据库connection，针对不同的product返回不同:
 *              mysql:      返回connection对象
 *              oracle:     返回connection对象
 *              mssql:      返回request对象
 *              relaen:     返回connection对象
 *              typeorm:    返回connection（已连接）
 */
async function getConnection() {
    let instance = dbmanager_1.DBManager.getConnectionManager();
    if (instance && typeof instance.getConnection === 'function') {
        return await instance.getConnection();
    }
    return null;
}
exports.getConnection = getConnection;
;
/**
 * 关闭数据库连接
 * @param conn  待关闭的连接，product为原生数据库(mysql、mssql、oracle) 时有效
 */
async function closeConnection(conn) {
    if (!conn) {
        return;
    }
    let cm = dbmanager_1.DBManager.getConnectionManager();
    if (cm) {
        cm.release(conn);
    }
}
exports.closeConnection = closeConnection;
/**
 * 获取EntityManager
 * @returns  实体管理器,product为relaen、typeorm时有效
 */
async function getManager() {
    let tr = await transactionmanager_1.TransactionManager.get(false);
    //事务不存在或事务manager不存在，则从connection manager中获取
    if (!tr || !tr.manager) {
        let cm = dbmanager_1.DBManager.getConnectionManager();
        if (typeof cm.getManager === 'function') {
            return await cm.getManager();
        }
        return null;
    }
    return tr.manager;
}
exports.getManager = getManager;
//# sourceMappingURL=connectionmanager.js.map