"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionProxy = void 0;
const dbmanager_1 = require("./dbmanager");
const transactionmanager_1 = require("./transactionmanager");
const connectionmanager_1 = require("./connectionmanager");
const instancefactory_1 = require("../main/instancefactory");
const threadlocal_1 = require("../tools/threadlocal");
/**
 * 事务Aop代理
 * @remarks
 * 用于事务方法代理
 */
class TransactionProxy {
    /**
     * 代理方法
     * @param instanceName  实例名
     * @param methodName    方法名
     * @param func          执行函数
     * @param instance      实例
     */
    static invoke(instanceName, methodName, func, instance) {
        return async (params) => {
            let retValue;
            switch (dbmanager_1.DBManager.product) {
                case 'relaen':
                    retValue = await new Promise(async (resolve, reject) => {
                        let v = await doRelaen();
                        if (v instanceof Error) {
                            reject(v);
                        }
                        else {
                            resolve(v);
                        }
                    });
                    break;
                case 'typeorm':
                    retValue = await new Promise(async (resolve, reject) => {
                        let v = await doTypeorm();
                        if (v instanceof Error) {
                            reject(v);
                        }
                        else {
                            resolve(v);
                        }
                    });
                    break;
                default: //datasource
                    retValue = await new Promise(async (resolve, reject) => {
                        let v = await doDataScource();
                        if (v instanceof Error) {
                            reject(v);
                        }
                        else {
                            resolve(v);
                        }
                    });
            }
            if (retValue instanceof Error) {
                throw retValue;
            }
            return retValue;
            /**
             * 数据源处理
             */
            async function doDataScource() {
                //初始化thread id
                if (!threadlocal_1.NoomiThreadLocal.getThreadId()) {
                    threadlocal_1.NoomiThreadLocal.newThreadId();
                }
                //advices获取
                let adviceInstance = instancefactory_1.InstanceFactory.getInstance('NoomiTransactionAdvice');
                let result;
                //before aop执行
                await adviceInstance.before.apply(adviceInstance);
                try {
                    result = await func.apply(instance, params);
                    //return aop执行
                    await adviceInstance.afterReturn.apply(adviceInstance);
                }
                catch (e) {
                    //异常aop执行
                    await adviceInstance.afterThrow.apply(adviceInstance);
                    result = handleErr(e);
                }
                return result;
            }
            /**
             * relaen处理
             */
            async function doRelaen() {
                if (!threadlocal_1.NoomiThreadLocal.getThreadId()) {
                    threadlocal_1.NoomiThreadLocal.newThreadId();
                }
                const { RelaenThreadLocal } = require('relaen');
                if (!RelaenThreadLocal.getThreadId()) {
                    RelaenThreadLocal.newThreadId();
                }
                //advices获取
                let adviceInstance = instancefactory_1.InstanceFactory.getInstance('NoomiTransactionAdvice');
                let result;
                //before aop执行
                await adviceInstance.before.apply(adviceInstance);
                try {
                    result = await func.apply(instance, params);
                    //return aop执行
                    await adviceInstance.afterReturn.apply(adviceInstance);
                }
                catch (e) {
                    //异常aop执行
                    await adviceInstance.afterThrow.apply(adviceInstance);
                    result = handleErr(e);
                }
                return result;
            }
            /**
             * typeorm 处理
             */
            async function doTypeorm() {
                let result;
                if (!threadlocal_1.NoomiThreadLocal.getThreadId()) {
                    threadlocal_1.NoomiThreadLocal.newThreadId();
                    //保存transaction id
                    let isoLevel;
                    if (transactionmanager_1.TransactionManager.transactionOption) {
                        isoLevel = transactionmanager_1.TransactionManager.transactionOption.isolationLevel;
                    }
                    let conn = await connectionmanager_1.getConnection();
                    const queryRunner = conn.createQueryRunner();
                    await queryRunner.startTransaction(isoLevel);
                    let tr = await transactionmanager_1.TransactionManager.get(true);
                    tr.manager = queryRunner.manager;
                    try {
                        result = await func.apply(instance, params);
                        await queryRunner.commitTransaction();
                    }
                    catch (e) {
                        result = handleErr(e);
                        await queryRunner.rollbackTransaction();
                    }
                    finally {
                        await queryRunner.release();
                        //从头事务管理器删除事务
                        transactionmanager_1.TransactionManager.del(tr);
                    }
                }
                else {
                    try {
                        result = await func.apply(instance, params);
                    }
                    catch (e) {
                        //异常信息，非error对象
                        result = handleErr(e);
                    }
                }
                return result;
            }
            /**
             * 处理异常
             * @param e     异常对象或异常信息
             */
            function handleErr(e) {
                return typeof e === 'string' ? new Error(e) : e;
            }
        };
    }
}
exports.TransactionProxy = TransactionProxy;
//# sourceMappingURL=transactionproxy.js.map