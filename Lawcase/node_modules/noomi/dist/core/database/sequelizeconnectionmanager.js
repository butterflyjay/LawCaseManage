"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequelizeConnectionManager = void 0;
const util_1 = require("../tools/util");
/**
 * sequelize连接管理器
 * @deprecated  0.4.7
 *              sequelize-typescript没与sequelize同步升级，导致安装时需要降级安装
 */
class SequelizeConnectionManager {
    /**
     * 构造器
     * @param cfg 配置对象 {usePool:使用连接池,useTransaction:是否启用事务机制,其它配置参考options属性说明}
     */
    constructor(cfg) {
        //使用cli-hooked
        // sequelize-typescript不支持cls，要用sequelize
        const SequelizeOrigin = require('sequelize');
        const { Sequelize } = require('sequelize-typescript');
        //需要cls-hooked支持
        // SequelizeOrigin.useCLS(TransactionManager.namespace);
        //处理models路径
        if (cfg.models && Array.isArray(cfg.models)) {
            cfg.models.forEach((item, i) => {
                if (typeof item === 'string') {
                    cfg.models[i] = util_1.Util.getAbsPath([item]);
                }
            });
        }
        this.sequelize = new Sequelize(cfg);
    }
    /**
     * 获取连接
     * @returns sequelize对象
     */
    async getConnection() {
        return this.sequelize;
    }
    /**
     * 释放连接，不做任何操作
     * @param conn
     */
    async release(conn) {
    }
    /**
     * 关闭连接，整个应用结束时执行
     */
    async close() {
        if (this.sequelize) {
            this.sequelize.close();
        }
    }
    /**
     * 获取EntityManager，TypeormConnectionManager有效，其它返回null
     * @returns
     */
    async getManager() {
        return null;
    }
    ;
}
exports.SequelizeConnectionManager = SequelizeConnectionManager;
//# sourceMappingURL=sequelizeconnectionmanager.js.map