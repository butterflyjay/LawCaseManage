"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBManager = void 0;
const errorfactory_1 = require("../tools/errorfactory");
const mysqlconnectionmanager_1 = require("./mysqlconnectionmanager");
const instancefactory_1 = require("../main/instancefactory");
const transactionmanager_1 = require("./transactionmanager");
const application_1 = require("../tools/application");
const oracleconnectionmanager_1 = require("./oracleconnectionmanager");
const mssqlconnectionmanager_1 = require("./mssqlconnectionmanager");
const typeormconnectionmanager_1 = require("./typeormconnectionmanager");
const relaenconnectionmanager_1 = require("./relaenconnectionmanager");
/**
 * 数据库管理器
 * @remarks
 * 用于管理数据库相关配置
 */
class DBManager {
    /**
     * 初始化
     * @param cfg   配置项,参考数据库配置
     */
    static init(cfg) {
        //数据库默认mysql
        let product = cfg.product || 'mysql';
        this.product = product;
        //connection manager配置
        let cm;
        let cmName = cfg.connection_manager || 'noomi_connection_manager';
        //先查询是否有自定义的connection manager
        if (cfg.connection_manager) {
            cm = instancefactory_1.InstanceFactory.getInstance(cmName);
        }
        //新建connection manager
        if (!cm && product) {
            let opt = cfg.options;
            opt.usePool = cfg.use_pool;
            //设置是否使用transaction标志
            opt.useTransaction = cfg.transaction ? true : false;
            // connection manager
            let cm;
            //connection manager 类
            let clazz;
            switch (product) {
                case "mysql":
                    cm = new mysqlconnectionmanager_1.MysqlConnectionManager(opt);
                    clazz = mysqlconnectionmanager_1.MysqlConnectionManager;
                    break;
                case "mssql":
                    cm = new mssqlconnectionmanager_1.MssqlConnectionManager(opt);
                    clazz = mssqlconnectionmanager_1.MssqlConnectionManager;
                    break;
                case "oracle":
                    cm = new oracleconnectionmanager_1.OracleConnectionManager(opt);
                    clazz = oracleconnectionmanager_1.OracleConnectionManager;
                    break;
                case "relaen":
                    cm = new relaenconnectionmanager_1.RelaenConnectionManager(opt);
                    clazz = relaenconnectionmanager_1.RelaenConnectionManager;
                    break;
                case "typeorm":
                    cm = new typeormconnectionmanager_1.TypeormConnectionManager(opt);
                    clazz = typeormconnectionmanager_1.TypeormConnectionManager;
                    break;
            }
            //添加到实例工厂
            instancefactory_1.InstanceFactory.addInstance({
                name: cmName,
                instance: cm,
                class: clazz
            });
        }
        this.connectionManagerName = cmName;
        //事务配置
        if (cfg.transaction) {
            let opt = cfg.transaction;
            opt.product = product;
            transactionmanager_1.TransactionManager.init(opt);
        }
    }
    /**
     * 获取connection manager
     * @returns    connection manager
     */
    static getConnectionManager() {
        return instancefactory_1.InstanceFactory.getInstance(this.connectionManagerName);
    }
    /**
     * @exclude
     * 解析文件
     * @param path  文件路径
     */
    static parseFile(path) {
        //读取文件
        let json = null;
        try {
            let jsonStr = application_1.App.fs.readFileSync(path, 'utf-8');
            json = application_1.App.JSON.parse(jsonStr);
            this.init(json);
        }
        catch (e) {
            throw new errorfactory_1.NoomiError("2800") + '\n' + e;
        }
    }
}
exports.DBManager = DBManager;
//# sourceMappingURL=dbmanager.js.map