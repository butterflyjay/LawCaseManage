/**
 * Aop通知类型
 */
interface IAopAdvice {
    /**
     * 切点
     */
    pointcut_id?: string;
    /**
     * 通知类型 (before,after,after-return,after-throw,around)
     */
    type: string;
    /**
     * 对应的切面方法
     */
    method: string;
    /**
     * 切面对应的实例名或实例对象
     */
    instance: any;
}
/**
 * Aop切面类型
 */
interface IAopAspect {
    /**
     * 实例名
     */
    instance: string;
    /**
     * 切点数组
     */
    pointcuts: Array<AopPointcut>;
    /**
     * 通知数组
     */
    advices: Array<IAopAdvice>;
}
/**
 * 切点数据对象
 */
interface IPointcut {
    /**
     * 切点id
     */
    id: string;
    /**
     * 表达式串
     */
    expressions: Array<string>;
}
/**
 * @exclude
 * aop文件配置对象
 */
interface IAopCfg {
    files: Array<string>;
    pointcuts: Array<IPointcut>;
    aspects: Array<IAopAspect>;
}
/**
 * aop 切点类
 */
declare class AopPointcut {
    /**
     * 切点id
     */
    id: string;
    /**
     * 表达式数组（正则表达式）
     */
    expressions: Array<RegExp>;
    /**
     * 通知数组
     */
    advices: Array<IAopAdvice>;
    /**
     * 构造器
     * @param id            切点id(唯一)
     * @param expressions   该切点对应的表达式数组，表达式为正则表达式串
     */
    constructor(id: string, expressions: Array<string>);
    /**
     * 匹配方法是否满足表达式
     * @param instanceName  实例名
     * @param methodName    待检测方法
     * @returns             匹配返回true，否则返回false
     */
    match(instanceName: string, methodName: string): boolean;
    /**
     * 给切点添加通知
     * @param advice    通知对象
     */
    addAdvice(advice: IAopAdvice): void;
}
/**
 * Aop工厂
 * 用于管理所有切面、切点
 */
declare class AopFactory {
    /**
     * 切面map，用于存储所有切面
     */
    static aspects: Map<string, IAopAspect>;
    /**
     * 切点map，用于存储所有切点
     */
    static pointcuts: Map<string, AopPointcut>;
    /**
     * 已代理方法map，键为instanctName.methodName，避免重复代理
     * @since 0.4.4
     */
    static proxyMethodMap: Map<string, boolean>;
    /**
     * 添加一个切面
     * @param cfg   切面对象
     */
    static addAspect(cfg: IAopAspect): void;
    /**
     * 添加切点
     * @param id            切点id
     * @param expressions   方法匹配表达式数组
     */
    static addPointcut(id: string, expressions: Array<string>): void;
    /**
     * 为切点添加表达式
     * @param pointcutId    切点id
     * @param expression    表达式或数组
     */
    static addExpression(pointcutId: string, expression: string | Array<string>): void;
    /**
     * 为切点添加一个通知
     * @param advice 通知配置
     */
    static addAdvice(advice: IAopAdvice): void;
    /**
     * @exclude
     * 解析文件
     * @param path  文件路径
     */
    static parseFile(path: string): void;
    /**
     * 初始化切面工厂
     * @param config 配置对象，包含切点集合、切面集合(含通知集合)
     */
    static init(config: IAopCfg): void;
    /**
     * 更新aop匹配的方法代理，为所有aop匹配的方法设置代理
     */
    static updMethodProxy(): void;
    /**
     * 通过正则式给方法加代理
     * @param expr          表达式正则式
     */
    static addProxyByExpression(expr: RegExp): void;
    /**
     * 获取切点
     * @param instanceName  实例名
     * @param methodName    方法名
     * @returns             切点数组
     */
    static getPointcut(instanceName: string, methodName: string): Array<AopPointcut>;
    /**
     * 根据id获取切点
     * @param pointcutId    切点id
     * @returns             切点对象
     */
    static getPointcutById(pointcutId: string): AopPointcut;
    /**
     * 获取advices
     * @param instanceName  实例名
     * @param methodName    方法名
     * @return              {
     *                          before:[{instance:切面实例,method:切面方法},...]
     *                          after:[{instance:切面实例,method:切面方法},...]
     *                          return:[{instance:切面实例,method:切面方法},...]
     *                          throw:[{instance:切面实例,method:切面方法},...]
     *                      }
     */
    static getAdvices(instanceName: string, methodName: string): object;
}
export { AopFactory, IAopAdvice, IAopAspect, AopPointcut, IAopCfg, IPointcut };
