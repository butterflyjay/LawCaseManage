/**
 * 实例属性
 */
interface IInstanceProperty {
    /**
     * 属性名
     */
    name: string;
    /**
     * 引用实例名
     */
    ref: string;
}
/**
 * 实例配置对象
 */
interface IInstanceCfg {
    /**
     * 实例名
     */
    name: string;
    /**
     * 类名或类
     */
    class?: any;
    /**
     * 模块路径（相对noomi.ini配置的modulepath），与instance二选一
     */
    path?: string;
    /**
     * 实例与path 二选一
     */
    instance?: any;
    /**
     * 单例模式，如果为true，表示该类只创建一个实例，调用时，共享调用
     */
    singleton?: boolean;
    /**
     * 参数数组，初始化时需要传入的参数
     */
    params?: Array<any>;
    /**
     * 属性列表，定义需要注入的属性
     */
    properties?: Array<IInstanceProperty>;
}
/**
 * 实例对象，实例工厂中的存储元素
 */
interface IInstance {
    /**
     * 实例对象
     */
    instance?: any;
    /**
     * 类引用
     */
    class?: any;
    /**
     * 单例标志
     */
    singleton: boolean;
    /**
     * 构造器参数
     */
    params?: Array<any>;
    /**
     * 属性列表
     */
    properties?: Array<IInstanceProperty>;
}
/**
 * 注入参数对象，用于存储待注入对象的参数
 */
interface IInject {
    /**
     * 待注入实例
     */
    instance: any;
    /**
     * 待注入属性名
     */
    propName: string;
    /**
     * 注入实例名
     */
    injectName: string;
}
/**
 * 实例工厂
 * @remarks
 * 用于管理所有的实例对象
 */
declare class InstanceFactory {
    /**
     * 实例工厂map，存放所有实例对象
     */
    static factory: Map<string, IInstance>;
    /**
     * 模块基础路径数组，加载实例时从该路径加载
     */
    static mdlBasePath: Array<string>;
    /**
     * 待注入对象数组
     */
    static injectList: Array<IInject>;
    /**
     * 注入依赖map  键为注入类实例名，值为数组，数组元素为{className:类名,propName:属性名}
     * @since 0.4.4
     */
    static injectMap: Map<string, object[]>;
    /**
     * 初始化后操作数组(实例工厂初始化结束后执行) {func:Function,thisObj:func this指向}
     * @since 0.4.0
     */
    static afterInitOperations: Array<object>;
    /**
     * 工厂初始化
     * @param config    配置项
     */
    static init(config: any): void;
    /**
     * 添加单例到工厂
     * @param cfg       实例配置对象
     * @param replace   替换之前的实例
     * @returns         undefined或添加的实例
     */
    static addInstance(cfg: IInstanceCfg): any;
    /**
     * 为实例添加注入
     * @param instance      实例类
     * @param propName      属性名
     * @param injectName    注入的实例名
     */
    static addInject(instance: any, propName: string, injectName: string): void;
    /**
     * 完成注入操作
     */
    static finishInject(): void;
    /**
     * 获取实例
     * @param name  实例名
     * @param param 参数数组
     * @returns     实例化的对象或null
     */
    static getInstance(name: string, param?: Array<any>): any;
    /**
     * 通过类获取实例
     * @param clazz     类
     * @param param     参数数组
     * @returns         实例
     */
    static getInstanceByClass(clazz: any, param?: Array<any>): any;
    /**
     * 获取实例对象
     * @param name  实例名
     * @returns     实例对象
     */
    static getInstanceObj(name: string): IInstance;
    /**
     * 执行实例的一个方法
     * @param instancee     实例名或实例对象
     * @param methodName    方法名
     * @param params        参数数组
     * @param func          方法(与methodName二选一)
     * @returns             方法对应的结果
     */
    static exec(instance: any, methodName: string, params: Array<any>, func?: Function): any;
    /**
     * @exclude
     * 解析实例配置文件
     * @param path      文件路径
     */
    static parseFile(path: string): void;
    /**
     * @exclude
     * 处理配置对象
     * @param json      实例对象
     */
    private static handleJson;
    /**
     * 从文件添加实例
     * @param path  文件路径
     */
    static addInstances(path: string): void;
    /**
     * 获取instance工厂
     * @returns     实例工厂
     */
    static getFactory(): Map<string, IInstance>;
    /**
     * 更新与clazz相关的注入
     * @param clazz 类
     * @since 0.4.4
     */
    static updInject(clazz: any): void;
    /**
     * 添加初始化结束后操作
     * @param foo   待执行操作
     * @since 0.4.0
     */
    static addAfterInitOperation(foo: Function, thisObj: any): void;
    /**
     * 执行初始化操作
     * @since 0.4.0
     */
    static doAfterInitOperations(): void;
}
export { InstanceFactory, IInstance, IInstanceCfg, IInstanceProperty };
