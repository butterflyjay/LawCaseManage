import { HttpRequest } from "../../web/httprequest";
import { HttpResponse } from "../../web/httpresponse";
import { IWebCacheObj } from "../../web/webcache";
/**
 * 路由配置类型
 */
interface IRouteCfg {
    /**
     * 路由路径
     */
    path?: string;
    /**
     * 路由正则表达式
     */
    reg?: RegExp;
    /**
     * 该路由对应的实例名
     */
    instanceName: string;
    /**
     * 该路由对应的实例方法
     */
    method?: string;
    /**
     * 路由执行结果数组
     */
    results?: Array<IRouteResult>;
}
/**
 * 路由结果类型
 * @since 0.0.6
 */
declare enum ERouteResultType {
    /**
     * 重定向
     */
    REDIRECT = "redirect",
    /**
     * 路由链,和redirect不同，浏览器地址不会改变
     */
    CHAIN = "chain",
    /**
     * 文件流，主要用于文件下载
     */
    STREAM = "stream",
    /**
     * 什么都不做
     */
    NONE = "none",
    /**
     * json数据,默认类型
     */
    JSON = "json"
}
/**
 * 路由结果类型
 */
interface IRouteResult {
    /**
     * 结果类型
     */
    type?: ERouteResultType;
    /**
     * 返回值，当返回值与value一致时，将执行此结果
     */
    value?: any;
    /**
     * 路径，type 为redirect 和 url时，必须设置
     */
    url?: string;
    /**
     * 参数名数组，当type为chain时，从当前路由对应类中获取参数数组对应的属性值并以参数对象传递到下一个路由
     */
    params?: Array<string>;
}
/**
 * 路由对象
 */
interface IRoute {
    /**
     * 路由对应实例
     */
    instance: any;
    /**
     * 路由对应方法名
     */
    method: string;
    /**
     * 路由处理结果集
     */
    results?: Array<IRouteResult>;
    /**
     * route 实例对应url路径
     * @since 0.4.7
     */
    path?: string;
    /**
     * 参数对象
     * @since 0.4.7
     */
    params?: object;
}
/**
 * 路由工厂类
 * 用于管理所有路由对象
 */
declare class RouteFactory {
    /**
     * 动态路由(带通配符)路由集合
     */
    static dynaRouteArr: IRouteCfg[];
    /**
     * 静态路由(不带通配符)路由集合
     */
    static staticRouteMap: Map<string, IRouteCfg>;
    /**
     * 异常处理器实例名
     * @since 0.3.7
     */
    static errorHandler: string;
    /**
     * 添加路由
     * @param path      路由路径，支持通配符*，需要method支持
     * @param clazz     对应类
     * @param method    方法，path中包含*，则不设置
     * @param results   路由处理结果集
     */
    static addRoute(path: string, clazz: string, method?: string, results?: Array<IRouteResult>): void;
    /**
     * 根据路径获取路由对象
     * @param path      url路径
     * @returns         路由对象
     */
    static getRoute(path: string): IRoute;
    /**
     * 路由方法执行
     * @param pathOrRoute   路径或路由
     * @param req           request 对象
     * @param res           response 对象
     * @param params        调用参数对象
     * @returns             0 正常 1异常
     */
    static handleRoute(route: IRoute, req: HttpRequest, res: HttpResponse, params?: object): Promise<number | IWebCacheObj>;
    /**
     * 处理路由结果
     * @param route     route对象
     * @param data      路由对应方法返回值
     */
    static handleResult(route: IRoute, data: any): Promise<number | IWebCacheObj>;
    /**
     * 处理一个路由结果
     * @param route         route对象
     * @param result        route result
     * @param data          路由执行结果
     * @returns             cache数据对象或0
     */
    static handleOneResult(route: IRoute, result: IRouteResult, data: any): Promise<IWebCacheObj | number>;
    /**
     * 处理异常信息
     * @param res   response 对象
     * @param e     异常
     */
    static handleException(res: HttpResponse, e: any): void;
    /**
     * 初始化路由工厂
     * @param config    配置文件
     * @param ns        命名空间（上级路由路径）
     */
    static init(config: any, ns?: string): void;
    /**
     * 解析路由文件
     * @param path  文件路径
     * @param ns    命名空间，默认 /
     */
    static parseFile(path: string, ns?: string): void;
}
export { RouteFactory, IRoute, IRouteCfg, IRouteResult, ERouteResultType };
