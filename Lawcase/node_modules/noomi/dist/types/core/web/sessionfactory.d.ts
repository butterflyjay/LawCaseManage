import { HttpRequest } from "./httprequest";
import { NCache } from "../tools/ncache";
/**
 * session配置项
 */
interface ISessionCfg {
    /**
     * sessionId名
     */
    name: string;
    /**
     * 超时时间
     */
    timeout: number;
    /**
     * 存储类型 0:memory 1:redis
     */
    save_type?: number;
    /**
     * 缓存最大尺寸，save_type=0时有效
     */
    max_size: number;
    /**
     * redis名，save_type=1时有效
     */
    redis?: string;
}
/**
 * session 工厂类
 * @remarks
 * 用于管理session
 */
declare class SessionFactory {
    /**
     * session map，用于存放所有session对象
     */
    static sessions: Map<string, Session>;
    /**
     * cookie中的session name，默认NSESSIONID
     */
    static sessionName: string;
    /**
     * 过期时间(默认30分钟)
     */
    static timeout: number;
    /**
     * session存储类型 0内存 1redis，默认0
     */
    static type: number;
    /**
     * redis名，type为1时需要设置，默认为default
     */
    static redis: string;
    /**
     * 缓存对象
     */
    static cache: NCache;
    /**
     * 参数初始化
     * @param cfg session配置项
     */
    static init(cfg: ISessionCfg): void;
    /**
     * 获取session
     * @param req   request对象
     * @param res   response对象
     */
    static getSession(req: HttpRequest): Promise<Session>;
    /**
     * 删除session
     * @param sessionId     sessionId
     */
    static delSession(sessionId: string): Promise<void>;
    /**
     * 创建sessionId
     * @returns     用uuid生成的sessionId
     */
    static genSessionId(): string;
    /**
     * 获取cookie携带的sessionId
     * @param req   request对象
     * @returns     sessionId
     */
    static getSessionId(req: HttpRequest): string;
}
/**
 * session 类
 */
declare class Session {
    /**
     * session id
     */
    id: string;
    /**
     * 构造器
     * @param id sessionId
     */
    constructor(id: string);
    /**
     * 获取session值
     * @param key   键
     * @return      值或null
     */
    get(key: string): Promise<any>;
    /**
     * 设置session值
     * @param key   键
     * @param value 值
     */
    set(key: string, value: any): Promise<void>;
    /**
     * 删除session值
     * @param key   键
     */
    del(key: string): Promise<void>;
}
export { SessionFactory, Session };
