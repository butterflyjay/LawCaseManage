/// <reference types="node" />
import { ServerResponse, IncomingMessage } from "http";
import { HttpCookie } from "./httpcookie";
/**
 * response回写配置项
 */
interface IResponseWriteCfg {
    /**
     * 待写数据，可以是数据串或stream
     */
    data?: any;
    /**
     * 字符集，默认utf8
     */
    charset?: string;
    /**
     * mime类型，默认text/html
     */
    type?: string;
    /**
     * http状态码，默认200
     */
    statusCode?: number;
    /**
     * 跨域配置串，多个域名用','分割，默认用webconfig中配置的网址数组，如果都没配置，则使用*
     */
    crossDomain?: string;
    /**
     * 数据长度
     */
    size?: number;
    /**
     * 压缩类型，包括br,gzip,deflate
     */
    zip?: string;
    /**
     * 回写类型  text,file 默认text
     * @since 0.4.7
     */
    writeType?: string;
}
/**
 * response类
 * @remarks
 * 在ServerResponse基础上增加了写客户端方法，更适合直接使用
 */
export declare class HttpResponse extends ServerResponse {
    /**
     * 源response
     */
    srcRes: ServerResponse;
    /**
     * 源request
     */
    request: IncomingMessage;
    /**
     * cookie
     */
    cookie: HttpCookie;
    /**
     * 初始化response对象
     * @param req   源request对象
     * @param res   源response对象
     */
    init(req: IncomingMessage, res: ServerResponse): void;
    /**
     * 写到浏览器(客户)端
     * @param config    回写配置项
     */
    writeToClient(config: IResponseWriteCfg): void;
    /**
     * 写数据流到浏览器(客户端)
     * @param config    回写配置项
     *              data:file path
     * @param mimeType  mime 类型
     * @since           0.3.3
     */
    writeFileToClient(config: IResponseWriteCfg): void;
    /**
     * 设置回传header
     * @param key       键
     * @param value     值
     */
    setHeader(key: string, value: number | string | string[]): void;
    /**
     * 获取header
     * @param key
     * @returns    返回值
     */
    getHeader(key: string): number | string | string[];
    /**
     * 重定向
     * @param page  跳转路径url
     */
    redirect(page: string): void;
    /**
     * 写cookie到header
     */
    writeCookie(): string;
    /**
     * 设置跨域头
     */
    setCorsHead(): void;
    /**
     * 设置回写类型
     * @param type      类型
     */
    setContentType(type: string): void;
    /**
     * 设置content length
     * @param length    内容长度
     */
    setContentLength(length: number): void;
    /**
     * 处理head方法请求
     * @param config    response config
     * @returns         如果请方法为head，则返回true，否则返回false
     */
    doHead(config: IResponseWriteCfg): boolean;
    /**
     * 处理trace方法请求
     */
    doTrace(config: IResponseWriteCfg): void;
    /**
     * 处理options请求方法
     */
    doOptions(): void;
}
export {};
