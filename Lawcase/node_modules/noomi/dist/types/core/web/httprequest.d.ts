/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { Session } from "./sessionfactory";
import { HttpResponse } from "./httpresponse";
import { Socket } from "net";
/**
 * request类
 * @remarks
 * 在IncomingMessage基础上增加了参数解析等方法，更适合直接使用
 */
declare class HttpRequest extends IncomingMessage {
    /**
     * 源IncommingMessage对象(server listen 时传入)，某些需要操纵源IncommingMessage的情况下，可以直接使用
     */
    srcReq: IncomingMessage;
    /**
     * http response对象
     */
    response: HttpResponse;
    /**
     * 参数对象
     */
    parameters: object;
    /**
     * 构造器
     * @param req 源IncommingMessage对象(createServer时传入)
     * @param res 源ServerResponse对象(createServer时传入)
     */
    constructor(req: IncomingMessage, res: ServerResponse);
    /**
     * 初始化
     * @returns 请求参数
     */
    init(): Promise<object>;
    /**
     * 获取请求消息头信息
     * @param key   消息头名，具体取值参考message.headers
     * @returns     消息值
     */
    getHeader(key: string): string | string[] | undefined;
    /**
     * 获取请求方法，入GET、POSt等
     */
    getMethod(): string;
    /**
     * 获取来源url路径
     */
    getUrl(): string;
    /**
     * 获取socket，可以通过socket获取远程地址、本地地址等
     * @returns     socket对象
     */
    getSocket(): Socket;
    /**
     * 设置参数
     * @param name      参数名
     * @param value     参数值
     */
    setParameter(name: string, value: string): void;
    /**
     * 获取参数
     * @param name      参数名
     * @returns         参数值
     */
    getParameter(name: string): string;
    /**
     * 获取所有paramter
     * @returns         参数object
     */
    getAllParameters(): object;
    /**
     * 初始化url查询串
     */
    initQueryString(): void;
    /**
     * 获取session
     * @returns   session对象
     */
    getSession(): Promise<Session>;
    /**
     * POST时的参数处理
     * @returns     参数值对象
     */
    formHandle(): Promise<object>;
}
export { HttpRequest };
