import { HttpRequest } from "./httprequest";
import { HttpResponse } from "./httpresponse";
/**
 * 过滤器配置类型
 */
interface IFilterCfg {
    /**
     * 实例名(与instance二选一)
     */
    instance_name?: string;
    /**
     * 方法名,默认do
     * 方法需要返回true/false，如果为false，则表示不再继续执行（过滤器链）
     */
    method_name?: string;
    /**
     * 正则表达式串，或数组
     */
    url_pattern?: string | Array<string>;
    /**
     * 优先级，越小越高，1-10为框架保留，创建时尽量避免，默认10000
     */
    order?: number;
}
/**
 * filter类型
 */
interface IFilter {
    /**
     * 实例名
     */
    instance: string;
    /**
     * 方法名
     */
    method: string;
    /**
     * 正则表达式数组
     */
    patterns: Array<RegExp>;
    /**
     * 优先级，越小越高，1-10为框架保留，默认10000
     */
    order: number;
}
/**
 * 过滤器工厂类
 * @remarks
 * 用于管理所有过滤器对象
 */
declare class FilterFactory {
    /**
     * 过滤器实例数组
     */
    static filters: Array<IFilter>;
    /**
     * 添加过滤器到工厂
     * @param cfg   过滤器配置项
     */
    static addFilter(cfg: IFilterCfg): void;
    /**
     * @exclude
     * 文件解析
     * @param path      filter的json文件
     */
    static parseFile(path: string): void;
    /**
     * 初始化
     * @param config {filters:[{IFilterCfg1},...]}
     */
    static init(config: any): void;
    /**
     * 获取过滤器链
     * @param url   资源url
     * @returns     filter数组
     */
    static getFilterChain(url: string): Array<IFilter>;
    /**
     * 执行过滤器链
     * @param url       url路径
     * @param request   request 对象
     * @param response  response 对象
     * @param           全部执行完为true，否则为false
     */
    static doChain(url: string, request: HttpRequest, response: HttpResponse): Promise<boolean>;
}
export { FilterFactory };
