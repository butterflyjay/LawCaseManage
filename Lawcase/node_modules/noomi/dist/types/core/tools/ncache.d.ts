/**
 * cache item类型，用于cache操作参数传递
 */
interface ICacheItem {
    /**
     * 键
     */
    key: string;
    /**
     * 子键，当key对应值为map时，存取操作需要设置
     */
    subKey?: string;
    /**
     * 键对应值
     */
    value: any;
    /**
     * 超时时间(秒)，为0或不设置，则表示不超时
     */
    timeout?: number;
}
/**
 * cache配置类型，初始化cache时使用
 */
interface ICacheCfg {
    /**
     * cache 名
     */
    name: string;
    /**
     * 存储类型 0内存，1redis，默认0，如果应用设置为集群部署，则设置无效(强制为1)
     */
    saveType: number;
    /**
     * redis名，如果saveType=1，则必须设置，默认default
     */
    redis?: string;
    /**
     * 最大空间，默认为0(表示不限制)，如果saveType=1，设置无效
     */
    maxSize?: number;
}
/**
 * Cache类
 * @remarks
 * 用于处理缓存，支持内存cache和redis cache
 */
export declare class NCache {
    /**
     * redis名，saveType为1时存在
     */
    redis: string;
    /**
     * 内存cache对象，saveType=0时存在
     */
    memoryCache: MemoryCache;
    /**
     * cache名字，全局唯一
     */
    name: string;
    /**
     * 存储类型 0内存 1redis
     */
    saveType: number;
    /**
     * @exclude
     * redis存储的cache size名字前缀
     */
    redisSizeName: string;
    /**
     * @exclude
     * redis存储前缀
     */
    redisPreName: string;
    /**
     * @exclude
     * timeout redis 前缀
     */
    redisTimeout: string;
    /**
     * 构造器
     * @param cfg   cache初始化参数
     */
    constructor(cfg: ICacheCfg);
    /**
     * 添加值到cache
     * @param key       键
     * @param value     值
     * @param extra     附加信息
     * @param timeout   超时时间(秒)
     */
    set(item: ICacheItem, timeout?: number): Promise<void>;
    /**
     * 获取值
     * @param key           键
     * @param changeExpire  是否更新过期时间
     * @returns             value或null
     */
    get(key: string, subKey?: string, changeExpire?: boolean): Promise<any>;
    /**
     * 获取map，当key对应的存储对象为map时，则获取map，否则为null
     * @param key           键
     * @param changeExpire  是否更新过期时间
     * @return              object或null
     */
    getMap(key: string, changeExpire?: boolean): Promise<any>;
    /**
     * 删除键
     * @param key       键
     * @param subKey    子键
     */
    del(key: string, subKey?: string): Promise<void>;
    /**
     * 获取键数组
     * @param key   键，可以带通配符
     * @returns     键名组成的数组
     */
    getKeys(key: string): Promise<Array<string>>;
    /**
     * 是否拥有key
     * @param key   键
     * @returns     如果存在则返回true，否则返回false
     */
    has(key: string): Promise<boolean>;
    /**
     * 从redis获取值
     * @param key           键
     * @param subKey        子键
     * @param changeExpire  是否修改expire
     * @returns             键对应的值
     */
    private getFromRedis;
    /**
     * 从redis获取map
     * @param key           键
     * @apram subKey        子键
     * @param changeExpire  是否修改expire
     * @returns             object或null
     */
    private getMapFromRedis;
    /**
     * 存到值redis
     * @param item      cache item
     * @param timeout   超时时间
     */
    private addToRedis;
}
/**
 * @exclude
 * 内存存储项类
 */
declare class MemoryItem {
    /**
     * 键
     */
    key: string;
    /**
     * 类型0 字符串  1 map
     */
    type: number;
    /**
     * 创建时间
     */
    createTime: number;
    /**
     * 超时时间(秒)
     */
    timeout: number;
    /**
     * 过期时间
     */
    expire: number;
    /**
     * 使用记录，用于LRU置换，记录最近5次访问时间
     */
    useRcds: Array<any>;
    /**
     * 最近最久使用值，值越大越不淘汰
     */
    LRU: number;
    /**
     * 值
     */
    value: any;
    /**
     * 存储空间
     */
    size: number;
    /**
     * 构造器
     * @param timeout 超时时间
     */
    constructor(timeout?: number);
}
/**
 * @exclude
 * 内存cache类
 * 用于管理内存存储相关对象
 */
declare class MemoryCache {
    /**
     * 缓存最大size
     */
    maxSize: number;
    /**
     * 附加size（对象）
     */
    extraSize: number;
    /**
     * 存储总map
     */
    storeMap: Map<string, any>;
    /**
     * 当前使用大小
     */
    size: number;
    /**
     * 构造器
     * @param cfg
     */
    constructor(cfg: ICacheCfg);
    /**
     * 往缓存中存值
     * @param item      cache item
     * @param timeout   超时时间
     */
    set(item: ICacheItem, timeout?: number): void;
    /**
     * 从cache取值
     * @param key           键
     * @param subKey        子键
     * @param changeExpire  是否更新超时时间
     */
    get(key: string, subKey?: string, changeExpire?: boolean): any;
    /**
     * 获取map
     * @param key           键
     * @param changeExpire  是否更新过期时间
     * @return              object或null
     */
    getMap(key: string, changeExpire?: boolean): Promise<any>;
    /**
     * 获取键数组
     * @param key   键，可以带通配符
     * @returns     键名数组
     */
    getKeys(key: string): Array<string>;
    /**
     * 删除键
     * @param key       键
     * @param subKey    子键
     */
    del(key: string, subKey?: string): void;
    /**
     * 是否存在键
     * @param key   键
     * @return      存在则返回true，否则返回false
     */
    has(key: string): boolean;
    /**
     * 修改最后使用状态
     * @param item              memory item
     * @param changeExpire      释放修改expire
     */
    changeLastUse(item: MemoryItem, changeExpire?: boolean): void;
    /**
     * 获取值实际所占size
     * @param value     待检测值
     * @return          值所占空间大小
     */
    getRealSize(value: any): number;
    /**
     * 清理缓存
     * @param size  清理大小，为0仅清除超时元素
     */
    cleanup(size: number): void;
    /**
     * 通过lru进行清理
     * @return      清理的尺寸
     */
    clearByLRU(): number;
    /**
     * 检查和清理空间
     * @param item  cacheitem
     */
    checkAndClean(item: ICacheItem): void;
    /**
     * 计算LRU
     * timeout 的权重为5（先保证timeout由时间去清理）
     * right = sum(1-(当前时间-使用记录)/当前时间) + timeout?5:0
     * @param item 待计算的内存 item
     */
    cacLRU(item: MemoryItem): void;
}
export {};
