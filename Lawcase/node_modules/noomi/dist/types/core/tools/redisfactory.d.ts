/**
 * redis 配置项
 */
interface IRedisCfg {
    /**
     * redis名
     */
    name?: string;
    /**
     * 主机地址
     */
    host: string;
    /**
     * 端口号
     */
    port: string;
    /**
     * 其它配置，请参考npm redis
     */
    options?: any;
}
/**
 * redis存储项
 */
interface IRedisItem {
    /**
     * 键
     */
    key: string;
    /**
     * pre key,与pre+key作为真正的key
     */
    pre?: string;
    /**
     * 子键
     */
    subKey?: string;
    /**
     * 值
     */
    value?: any;
    /**
     * 超时时间
     */
    timeout?: number;
}
/**
 * redis 工厂
 */
declare class RedisFactory {
    /**
     * 存储所有的redis对象
     */
    static clientMap: Map<string, any>;
    /**
     * 添加redis client到clientMap
     * @param cfg   redis配置项
     */
    static addClient(cfg: IRedisCfg): void;
    /**
     * 获得redis client
     * @param name      client name，默认default
     * @return          redis client
     */
    static getClient(name: string): any;
    /**
     * 把值存入redis中
     * @param clientName    client name
     * @param item          redis item
     */
    static set(clientName: string, item: IRedisItem): Promise<void>;
    /**
     * 从redis 中取值
     * @param clientName    client name
     * @param item          redis item
     * @return              item value
     */
    static get(clientName: string, item: IRedisItem): Promise<string>;
    /**
     * 获取map数据
     * @param clientName    client name
     * @param item          IRedisItem
     * @returns             object或null
     */
    static getMap(clientName: string, item: IRedisItem): Promise<any>;
    /**
     * 是否存在某个key
     * @param clientName    redis name
     * @param key           key
     * @return              存在则返回true，否则返回false
     */
    static has(clientName: string, key: string): Promise<boolean>;
    /**
     * 设置超时时间
     * @param client    client name
     * @param key       键
     * @param timeout   超时时间
     */
    static setTimeout(client: any, key: string, timeout: number): Promise<void>;
    /**
     * 删除项
     * @clientName      client name
     * @param key       键
     * @param subKey    子键
     */
    static del(clientName: string, key: string, subKey?: string): void;
    /**
     * 解析配置文件
     * @param path  redis配置文件路径
     */
    static parseFile(path: string): void;
    /**
     * 初始化
     * @param config    redis配置
     */
    static init(config: any): void;
}
export { RedisFactory };
