import { EntityManager } from 'typeorm';
import { IConnectionManager } from './connectionmanager';
/**
 * sequelize连接管理器
 * @deprecated  0.4.7
 *              sequelize-typescript没与sequelize同步升级，导致安装时需要降级安装
 */
declare class SequelizeConnectionManager implements IConnectionManager {
    /**
     * sequelize对象
     */
    sequelize: any;
    /**
     * 数据库配置项，示例如下：
     * ```
     * {
     *   "dialect":"mysql",
     *   "host":"localhost",
     *   "port":3306,
     *   "username":"your user",
     *   "password":"your password",
     *   "database":"your db",
     *   "pool": {
     *       "max": 5,
     *       "min": 0,
     *       "acquire": 30000,
     *       "idle": 10000
     *   },
     *   "define": {
     *       "timestamps": false
     *   },
     *   "models":["your model js file directory"],
     *   "repositoryMode":true
     * }
     * ```
     * 更多细节参考npm sequelize
     */
    options: object;
    /**
     * 构造器
     * @param cfg 配置对象 {usePool:使用连接池,useTransaction:是否启用事务机制,其它配置参考options属性说明}
     */
    constructor(cfg: any);
    /**
     * 获取连接
     * @returns sequelize对象
     */
    getConnection(): Promise<any>;
    /**
     * 释放连接，不做任何操作
     * @param conn
     */
    release(conn?: any): Promise<void>;
    /**
     * 关闭连接，整个应用结束时执行
     */
    close(): Promise<void>;
    /**
     * 获取EntityManager，TypeormConnectionManager有效，其它返回null
     * @returns
     */
    getManager(): Promise<EntityManager>;
}
export { SequelizeConnectionManager };
