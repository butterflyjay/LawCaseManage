import { Connection } from "./connection";
import { IConnectionCfg } from "./types";
/**
 * 连接管理器
 */
declare class ConnectionManager {
    /**
     * 配置
     */
    static options: any;
    /**
     * 连接池
     */
    private static pool;
    /**
     * 数据库 npm 模块
     */
    private static dbMdl;
    /**
     * 连接map {threadId:{num:conn创建次数,conn:连接}}
     * 保证一个异步方法中只能有一个connection
     */
    private static connectionMap;
    /**
     * 初始化连接管理器
     * @param cfg relaen配置文件的数据库配置对象
     */
    static init(cfg: IConnectionCfg): void;
    /**
     * 获取连接对象
     * @param id   创建者id，直接使用时，不需要设置该值
     * @returns    connection对象
     */
    static createConnection(id?: number): Promise<Connection>;
    /**
     * 关闭连接
     * @param connection    数据库连接对象
     * @param force         是否强制释放
     */
    static closeConnection(connection: Connection, force?: boolean): Promise<unknown>;
    /**
     * 获取 mysql 连接
     */
    private static getMysqlConnection;
    /**
     * 关闭mysql connection
     * @param connection 数据库连接对象
     */
    private static closeMysqlConnection;
    private static getOracleConnection;
    private static getMssqlConnection;
}
/**
 * 获取连接对象
 * @param id   创建者id，直接使用时，不需要设置该值
 * @returns    connection对象
 */
declare function getConnection(id?: number): Promise<Connection>;
export { ConnectionManager, getConnection };
