import { EntityManager } from "./entitymanager";
import { IEntity, EEntityState } from "./types";
/**
 * entity manager 工厂
 */
declare class EntityManagerFactory {
    /**
     * 连接map {threadId:{num:em创建次数,em:entity manager}}
     * 保证一个异步方法中只能有一个entitymanager
     */
    private static entityManagerMap;
    /**
     * 实体状态map
     */
    private static entityStatusMap;
    /**
     * 创建 entity manager，使用后需要释放
     * @param conn  数据库连接对象
     * @returns     entitymanager
     */
    static createEntityManager(): Promise<EntityManager>;
    /**
     * 关闭entitymanager
     * @param em        entitymanager
     * @param force     是否强制关闭
     */
    static closeEntityManager(em: EntityManager, force?: boolean): Promise<void>;
    /**
     * 获取当前entitymanager，使用后不用释放
     */
    static getCurrentEntityManager(): EntityManager;
    /**
     * 设置实体状态
     * @param entity    实体
     * @param state     状态
     */
    static setEntityStatus(entity: IEntity, state: EEntityState): void;
    /**
     * 获取实体状态
     * @param entity    实体对象
     * @returns         实体状态或undefined
     */
    static getEntityStatus(entity: IEntity): EEntityState;
}
/**
 * 返回entity manager
 */
declare function getEntityManager(): Promise<EntityManager>;
export { EntityManagerFactory, getEntityManager };
