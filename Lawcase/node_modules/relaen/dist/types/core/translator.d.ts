import { IEntity, EQueryType } from "./types";
/**
 * 翻译器
 */
declare class Translator {
    /**
     * 链式map {linkName:{entity:实体类名,alias:别名,co:字段对象}}
     * linkName为 实体类名[_外键引用名1_外键引用名2_...]
     * 如: Shop_owner
     */
    linkNameMap: Map<string, object>;
    /**
     * 别名id
     */
    private aliasId;
    /**
     * 选中字段数组
     */
    private selectedFields;
    /**
     * 主实体名
     */
    private mainEntityName;
    /**
     * from table 数组
     */
    private fromTables;
    /**
     * where条件string
     */
    private whereObject;
    /**
     * 修饰符 如distince
     */
    modifiers: string[];
    /**
     * order by string
     */
    private orderString;
    /**
     * sql 类型
     */
    sqlType: EQueryType;
    constructor(entityName?: string);
    /**
     * entity转insert sql
     * @param entity
     */
    static entityToInsert(entity: any): any[];
    /**
     * entity转update sql
     * @param entity                待更新entity
     * @param ignoreUndefinedValue  忽略undefined值
     */
    static entityToUpdate(entity: IEntity, ignoreUndefinedValue?: boolean): any[];
    /**
     * entity转update sql
     * @param entity        实体对象
     * @param className     实体类名
     *
     */
    static toDelete(entity: any, className?: string): any[];
    /**
     * 处理前置修饰符
     */
    handleModifer(modifier: string): void;
    /**
     * 处理select字段集合
     * @param arr   字段集合
     */
    handleSelectFields(arr: string[], entityName?: string): void;
    /**
     * 处理一个字段
     * @param field         字段名
     * @param entityName    实体类名
     * @param linkName      链名
     * @param isCond        是否为条件字段
     */
    private handleOneField;
    /**
     * 处理重复entityName
     * @param arr           实体类名数组
     */
    handleFrom(arr: string[]): void;
    /**
     * 处理where条件
     * @param params        参数对象，每个参数值参考ICondValueObj接口
     * @param entityName    实体类名
     */
    handleWhere(params: object, entityName?: string): any;
    /**
     * 处理order by
     * @param params
     * @param entityName
     */
    handleOrder(params: object, entityName?: string): string;
    /**
     * 产生查询sql
     * @returns     数组[sql,linkMap,values]
     *              其中：linkMap为该translator的linkNameMap，values为查询参数值
     */
    getQuerySql(): any[];
    /**
     * 获取select sql
     * @param mainOrm   主表类对象
     * @returns 数组[sql,linkMap,values]
     *          其中：linkMap为该translator的linkNameMap，values为查询参数值
     */
    private getSelectSql;
    /**
     * 生成增删改sql
     * @returns 数组[sql,linkMap,values]
     *          其中：linkMap为该translator的linkNameMap，values为查询参数值
     */
    private getDeleteSql;
}
export { Translator };
