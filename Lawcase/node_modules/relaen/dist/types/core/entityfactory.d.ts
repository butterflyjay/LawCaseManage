import { IEntityCfg, IEntityPKey, IEntityColumn, IEntityRelation } from "./types";
/**
 * 实体工厂，管理所有实体类
 */
declare class EntityFactory {
    /**
     * 实体类集
     */
    private static entityClasses;
    /**
     * 新建实体map，用于存放新建状态的实体，当实体执行save、delete操作后，将从该map移除
     * {entity:createTime}
     */
    /**
     * 添加实体类
     * @param entityName    实体类名
     * @param tblName       表名
     * @param schema        数据库名
     */
    static addClass(entity: any, tblName: string, schema?: string): void;
    /**
     * 添加主键
     * @param entityName    实体类名
     * @param propName      实体字段名
     * @param cfg
     */
    static addPKey(entityName: string, propName: string, cfg: IEntityPKey): void;
    /**
     * 添加实体字段
     * @param entityName    实体类名
     * @param propName      实体字段名
     * @param cfg
     */
    static addColumn(entityName: string, colName: string, cfg: IEntityColumn): void;
    /**
     * 添加实体关系
     * @param entityName    实体名
     * @param colName       属性名
     * @param rel           关系对象
     */
    static addRelation(entityName: string, colName: string, rel: IEntityRelation): void;
    /**
     * 检查class是否存在，不存在则新建
     * @param entityName    实体类名
     */
    private static checkAndNewClass;
    /**
     * 获取entity对应的entity class 配置型
     * @param entityName    实体类名
     * @returns             实体配置
     */
    static getClass(entityName: string): IEntityCfg;
    /**
     * 是否有entity class
     * @param entityName 实体类名
     */
    static hasClass(entityName: string): boolean;
    /**
     * 从文件添加实体到工厂
     * @param path  文件路径
     */
    static addEntities(path: string): void;
    private static toReg;
}
export { EntityFactory };
